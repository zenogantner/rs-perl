# This file is part of the Perl Collaborative Filtering Framework
#
# Copyright 2007, 2008 Zeno Gantner

use strict;
use warnings;
use encoding 'utf8'; # Ã¤

# TODO: OOP hierarchy, normalized output as an option for every predict method

package Predictor::JointWeighting;

sub new {
	my ($class, $arg_ref) = @_;

	my $self = {
		verbose    => 0,
		# predictor1
		# predictor2
		# lambda
		%$arg_ref
	};
	# TODO: check value of lambda

	print STDERR "Creating object of type Predictor::JointWeighting.\n" if $self->{verbose};
	my @keys = keys %$self;
	print STDERR "Keys: @keys\n" if $self->{verbose};

	return bless $self, $class;
}


# TODO: lamdba as an optional parameter??
#       make it independent of the MovieLens scale
sub predict {
	my ($self, $user_id, $item_id) = @_;

	# TODO: make this independent of scale
	#my $normalized_prediction1 = ($self->{predictor1}->predict($user_id, $item_id) - 1) / 4;
	#my $normalized_prediction2 = ($self->{predictor2}->predict($user_id, $item_id) - 1) / 4;

	# This may happen if we use buggy predictors
	#if ($normalized_prediction1 < 0 || $normalized_prediction2 < 0) {
	#	die "Predictor::JointWeighting->predict: Values cannot be < 0: $normalized_prediction1, $normalized_prediction2; "
        #          . "u $user_id, i $item_id\n";
	#}

	#my $part1_result = $normalized_prediction1 ** $self->{lambda};
        #my $part2_result = $normalized_prediction2 ** (1 - $self->{lambda});
	#my $normalized_result = $part1_result * $part2_result;

	#my $result = $normalized_result * 4 + 1;
	#print STDERR "$part1_result * $part2_result = $normalized_result; $normalized_result * 4 + 1 = $result\n";
	
	#return $result;

	my $part1_result = $self->{predictor1}->predict($user_id, $item_id);
	my $part2_result = $self->{predictor2}->predict($user_id, $item_id);

	if ($part1_result < 1 || $part2_result < 1) {
		die "Predictor::JointWeighting->predict: Values cannot be < 1: $part1_result, $part2_result; "
                  . "u $user_id, i $item_id\n";
	}
	if ($part1_result > 5 || $part2_result > 5) {
		die "Predictor::JointWeighting->predict: Values cannot be > 5: $part1_result, $part2_result; "
                  . "u $user_id, i $item_id\n";
	}

	$part1_result = $part1_result ** $self->{lambda};
	$part2_result = $part2_result ** (1 - $self->{lambda});

	return $part1_result * $part2_result;
}


sub description {
	my ($self) = @_;

	return "linear combination of $self->{predictor1}->{description} and $self->{predictor2}->{description}, lambda=$self->{lambda}";
}

1;
